#/*****************************************************************************
#* MIDRES Library - an isomorphic gamelib for retrocomputers                 *
#*****************************************************************************
#* Copyright 2020-2021 Marco Spedaletti (asimov@mclink.it)
#* 
#* Licensed under the Apache License, Version 2.0 (the "License");
#* you may not use this file except in compliance with the License.
#* You may obtain a copy of the License at
#* 
#* http://www.apache.org/licenses/LICENSE-2.0
#* 
#* Unless required by applicable law or agreed to in writing, software
#* distributed under the License is distributed on an "AS IS" BASIS,
#* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#* See the License for the specific language governing permissions and
#* limitations under the License.
#*----------------------------------------------------------------------------
#* Concesso in licenza secondo i termini della Licenza Apache, versione 2.0 
#* (la "Licenza"); è proibito usare questo file se non in conformità alla 
#* Licenza. Una copia della Licenza è disponibile all'indirizzo:
#* 
#* http://www.apache.org/licenses/LICENSE-2.0
#* 
#* Se non richiesto dalla legislazione vigente o concordato per iscritto, 
#* il software distribuito nei termini della Licenza è distribuito 
#* "COSÌ COM'È", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO, esplicite o 
#* implicite. Consultare la Licenza per il testo specifico che regola le 
#* autorizzazioni e le limitazioni previste dalla medesima.
#****************************************************************************/

SYMBOLS {
    __TAPEHDR__:   type = import;
    __BASHDR__:    type = import;
    __PROGFLAG__:  type = weak, value = $00; # $00=BASIC, $80=machine code
    __AUTORUN__:   type = weak, value = $C7; # $00=only load, $C7=run
    __STACKSIZE__: type = weak, value = $0800; # 2K stack
    __GRAB__:      type = weak, value = 0; # 0=don't grab graphics RAM, 1=grab graphics RAM
    __RAMEND__:    type = weak, value = $9800 + $1C00 * __GRAB__;
}
MEMORY {
    ZP:      file = "", define = yes, start = $00E2,            size = $001A;
    TAPEHDR: file = %O, type   = ro,  start = $0000,            size = $001F;
    BASHEAD: file = %O, define = yes, start = $0501,            size = $000D;
    MAIN:    file = %O, define = yes, start = __BASHEAD_LAST__, size = __RAMEND__ - __MAIN_START__;
    BSS:     file = "",               start = __ONCE_RUN__,     size = __RAMEND__ - __STACKSIZE__ - __ONCE_RUN__;
}
SEGMENTS {
    ZEROPAGE: load = ZP,      type = zp;
    TAPEHDR:  load = TAPEHDR, type = ro;
    BASHDR:   load = BASHEAD, type = ro,  optional = yes;
    STARTUP:  load = MAIN,    type = ro;
    LOWCODE:  load = MAIN,    type = ro,  optional = yes;
    CODE:     load = MAIN,    type = ro;
    RODATA:   load = MAIN,    type = ro;
    DATA:     load = MAIN,    type = rw;
    INIT:     load = MAIN,    type = rw;
    ONCE:     load = MAIN,    type = ro,  define   = yes;
    BASTAIL:  load = MAIN,    type = ro,  optional = yes;
    BSS:      load = BSS,     type = bss, define   = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
