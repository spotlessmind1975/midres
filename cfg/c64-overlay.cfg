# /****************************************************************************
#  * midres - Portable midres library for retrocomputers                      *
#  *                                                                          *
#  * Copyright (c) 2020 by Marco Spedaletti. Licensed under CC-BY-NC-SA       *
#  *--------------------------------------------------------------------------*
#  * LINKER DEFINITIONS                                                       *
#  ****************************************************************************/

###############################################################################

# GENERAL FEATURES

FEATURES {
    
    # Starting address of the program.

    STARTADDRESS: default = $0801;
}

###############################################################################

# IMPORTED / EXPORTED SYMBOLS

SYMBOLS {

    # Imported symbols

    __LOADADDR__:     type = import;
    __EXEHDR__:       type = import;
    __OVERLAYADDR__:  type = import;

    # This is the size of the stack. In general, it can be reduced to have 
    # more space both in the resident part and in the changing part.
    __STACKSIZE__:    type = weak,   value = $0800; # 2.048 bytes

    # This is the (maximum) size of each module that can be "overlayed". 
    # It should be the largest of the dimensions of each module. 
    # This memory space should be considered as "no longer available" 
    # for the resident part.
    __OVERLAYSIZE__:  type = weak,   value = $1000; # 4.096 bytes

    # This is the "upper limit" of the available memory, from which the space 
    # for the overlay modules will be obtained.
    __HIMEM__:        type = weak,   value = $D000;

    # The start of the overlay module is calculated automatically by 
    # subtracting the maximum size of the overlay module from the address of 
    # the upper limit of the available memory.
    __OVERLAYSTART__: type = export, value = __HIMEM__ - __OVERLAYSIZE__;

}

###############################################################################

# MEMORY DEFINITIONS

MEMORY {

    # Zero page area
    ZP:       file = "", define = yes, start = $0002,                size = $001A;

    # Starting loading address location area
    LOADADDR: file = %O,               start = %S - 2,               size = $0002;

    # Header area
    HEADER:   file = %O, define = yes, start = %S,                   size = $000D;

    # Resident memory area
    MAIN:     file = %O, define = yes, start = __HEADER_LAST__,      size = __HIMEM__ - __HEADER_LAST__;

    # Uninitialized data area
    BSS:      file = "",               start = __ONCE_RUN__,         size = __OVERLAYSTART__ - __STACKSIZE__ - __ONCE_RUN__;

    # Overlay memory areas. The overlay zones are overlapped, and this allows you 
    # to load only one module at a time (because it will always be loaded in 
    # the same place, and doing so replacing the old one). However, they are called 
    # by different names, to indicate that the content of each of them may actually 
    # be different.
    OVL1ADDR: file = "%O.screen",      start = __OVERLAYSTART__ - 2, size = $0002;
    OVL1:     file = "%O.screen",      start = __OVERLAYSTART__,     size = __OVERLAYSIZE__;
    OVL2ADDR: file = "%O.drawing",     start = __OVERLAYSTART__ - 2, size = $0002;
    OVL2:     file = "%O.drawing",     start = __OVERLAYSTART__,     size = __OVERLAYSIZE__;
    OVL3ADDR: file = "%O.screen2",     start = __OVERLAYSTART__ - 2, size = $0002;
    OVL3:     file = "%O.screen2",     start = __OVERLAYSTART__,     size = __OVERLAYSIZE__;
    OVL4ADDR: file = "%O.drawing2",    start = __OVERLAYSTART__ - 2, size = $0002;
    OVL4:     file = "%O.drawing2",    start = __OVERLAYSTART__,     size = __OVERLAYSIZE__;
    OVL5ADDR: file = "%O.bitblit",     start = __OVERLAYSTART__ - 2, size = $0002;
    OVL5:     file = "%O.bitblit",     start = __OVERLAYSTART__,     size = __OVERLAYSIZE__;
    OVL6ADDR: file = "%O.6",           start = __OVERLAYSTART__ - 2, size = $0002;
    OVL6:     file = "%O.6",           start = __OVERLAYSTART__,     size = __OVERLAYSIZE__;
    OVL7ADDR: file = "%O.7",           start = __OVERLAYSTART__ - 2, size = $0002;
    OVL7:     file = "%O.7",           start = __OVERLAYSTART__,     size = __OVERLAYSIZE__;
    OVL8ADDR: file = "%O.8",           start = __OVERLAYSTART__ - 2, size = $0002;
    OVL8:     file = "%O.8",           start = __OVERLAYSTART__,     size = __OVERLAYSIZE__;
    OVL9ADDR: file = "%O.9",           start = __OVERLAYSTART__ - 2, size = $0002;
    OVL9:     file = "%O.9",           start = __OVERLAYSTART__,     size = __OVERLAYSIZE__;
}

###############################################################################

# SEGMENT DEFINITIONS

SEGMENTS {

    ZEROPAGE: load = ZP,       type = zp;

    LOADADDR: load = LOADADDR, type = ro;

    EXEHDR:   load = HEADER,   type = ro;

    STARTUP:  load = MAIN,     type = ro;
    LOWCODE:  load = MAIN,     type = ro,                optional = yes;
    CODE:     load = MAIN,     type = ro;
    RODATA:   load = MAIN,     type = ro;
    DATA:     load = MAIN,     type = rw;
    INIT:     load = MAIN,     type = rw;
    ONCE:     load = MAIN,     type = ro,  define = yes;

    BSS:      load = BSS,      type = bss, define = yes;

    OVL1ADDR: load = OVL1ADDR, type = ro;
    OVERLAY1: load = OVL1,     type = ro,  define = yes, optional = yes;
    OVL2ADDR: load = OVL2ADDR, type = ro;
    OVERLAY2: load = OVL2,     type = ro,  define = yes, optional = yes;
    OVL3ADDR: load = OVL3ADDR, type = ro;
    OVERLAY3: load = OVL3,     type = ro,  define = yes, optional = yes;
    OVL4ADDR: load = OVL4ADDR, type = ro;
    OVERLAY4: load = OVL4,     type = ro,  define = yes, optional = yes;
    OVL5ADDR: load = OVL5ADDR, type = ro;
    OVERLAY5: load = OVL5,     type = ro,  define = yes, optional = yes;
    OVL6ADDR: load = OVL6ADDR, type = ro;
    OVERLAY6: load = OVL6,     type = ro,  define = yes, optional = yes;
    OVL7ADDR: load = OVL7ADDR, type = ro;
    OVERLAY7: load = OVL7,     type = ro,  define = yes, optional = yes;
    OVL8ADDR: load = OVL8ADDR, type = ro;
    OVERLAY8: load = OVL8,     type = ro,  define = yes, optional = yes;
    OVL9ADDR: load = OVL9ADDR, type = ro;
    OVERLAY9: load = OVL9,     type = ro,  define = yes, optional = yes;
}

###############################################################################

# ADDITIONAL INITIALIZATIONS

FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
